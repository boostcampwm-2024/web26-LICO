user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
        worker_connections 768;
        # multi_accept on;
}

http {
    include       mime.types;
    default_type  application/octet-stream;   lua_shared_dict app_cache 10m;

    lua_need_request_body on;

    access_log /var/log/nginx/proxy_access.log;
    error_log /var/log/nginx/proxy_error.log;

    server {
        listen 3000;

        location /api/validate/publish {
            # Lua를 이용해 본문을 읽고 app과 stream 값을 기반으로 라우팅
            content_by_lua_block {
                local cjson = require("cjson")
                local http = require("resty.http")

                -- 요청 본문 읽기
                ngx.req.read_body()
                local body = ngx.req.get_body_data()

                -- JSON 본문 파싱
                local success, data = pcall(cjson.decode, body)
                local app = data.app
                local stream = data.stream

                -- app 값에 따라 대상 서버 결정
                local upstream
                if app == "live" then
                    upstream = "http://192.168.1.9:3000/lives/onair"
                elseif app == "dev" then                   upstream = "http://192.168.1.7:3000/lives/onair"
                else
                    ngx.status = ngx.HTTP_BAD_REQUEST
                    ngx.say("Invalid app")
                    return
                end

                -- stream 값이 있는지 확인
                if not stream then
                    ngx.status = ngx.HTTP_BAD_REQUEST
                    ngx.say("Stream parameter is required")
                    return
                end

                -- 동적 엔드포인트 설정
                local target_url = upstream .. "/" .. stream

                ngx.log(ngx.ERR, "Target URL :",target_url)

                local httpc = http.new()

                local res,err = httpc:request_uri(target_url, {
                method = "POST",
                body = body,
                headers = {
                ["Content-Type"] = "application/json",}})


            ngx.status = res.status

            ngx.log(ngx.ERR, "body", res.body)
            ngx.say(res.body)
        }
    }
}
}